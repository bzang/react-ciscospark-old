import React, {PropTypes, Component} from 'react';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import classNames from 'classnames';
import autobind from 'autobind-decorator';

import Video from '@ciscospark/react-component-video';
import {ICON_TYPE_VIDEO_OUTLINE, ICON_TYPE_EXIT} from '@ciscospark/react-component-icon';
import Button from '@ciscospark/react-component-button';
import {
  callUser
} from '@ciscospark/redux-module-media';

import styles from './styles.css';

export class MeetWidget extends Component {

  componentDidMount() {
    const props = this.props;
    const {
      shouldStartMeeting
    } = this.props;
    const {
      media
    } = props;
    if (shouldStartMeeting
      && !media.getIn([`status`, `isCalling`])
      && !media.getIn([`status`, `isConnected`])) {
      this.handleCall();
    }
  }

  shouldComponentUpdate(nextProps) {
    const props = this.props;
    return nextProps.media !== props.media;
  }

  @autobind
  handleCall() {
    const props = this.props;
    const {
      toPersonId,
      spark
    } = this.props;
    props.callUser({userId: toPersonId}, spark);
  }

  @autobind
  handleHangup() {
    const props = this.props;
    const {
      media
    } = props;
    media.get(`call`).hangup();
  }

  render() {
    const props = this.props;
    const {
      media
    } = props;
    const remoteUrl = media.getIn([`remoteStream`, `url`]);
    const connecting = media.getIn([`status`, `isConnecting`]);
    return (
      <div className={classNames(styles.meetContainer, `meet-container`)}>
        <div className={classNames(styles.videoContainer, `video-container`)}>
          {
            remoteUrl &&
            <Video src={remoteUrl} />
          }
        </div>
        <div className={classNames(styles.controlsContainer, `controls-container`)}>
          {
            !remoteUrl && !connecting &&
            <Button
              buttonClassName={classNames(styles.button, styles.callButton)}
              iconType={ICON_TYPE_VIDEO_OUTLINE}
              onClick={this.handleCall}
            />
          }
          {
            remoteUrl &&
            <Button
              buttonClassName={classNames(styles.button, styles.hangupButton)}
              iconType={ICON_TYPE_EXIT}
              onClick={this.handleHangup}
            />
          }
        </div>

      </div>
    );
  }
}

MeetWidget.propTypes = {
  shouldStartMeeting: PropTypes.bool,
  spark: PropTypes.object.isRequired,
  toPersonId: PropTypes.string.isRequired
};

function mapStateToProps(state, ownProps) {
  return {
    spark: ownProps.spark || state.spark,
    media: state.media
  };
}

export default connect(
  mapStateToProps,
  (dispatch) => bindActionCreators({
    callUser
  }, dispatch)
)(MeetWidget);
